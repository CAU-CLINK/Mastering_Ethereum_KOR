[[intro_chapter]]
== 이더리움 베이직

((("Ethereum (generally)","basics", id="ix_02intro-asciidoc0", range="startofrange"))) 이번 챕터에서는 이더리움에 대해서 본격적으로 알아볼 것이고, 지갑을 어떻게 사용하는지, 거래(트랜잭션)는 어떻게 발생시키는지 그리고 기본적인 스마트 컨트랙트를 어떻게 작동시키는지에 대해서 배울 것이다.

[[ether_units]]
=== 이더리움 화폐 단위

((("currency units")))((("Ethereum (generally)","currency units")))이더리움의 화폐 단위는 _이더(ether)_  라고 불리운다. 또한 "ETH"라고 혹은 &#926 모양으로 표기 되기도 한다. (알파벳 대문자 E 처럼 보이는 그리스 문자 "Xi" 에서 따왔다) 또, 아주 가끔(?) &#9830; 의 모양으로도 표기된다. 예를 들면, 1 ether , 1 ETH , &#926;1, 또는 &#9830;1 이렇게 표시된다. 

[TIP]
====
Use Unicode character +U+039E+ for &#926; and +U+2666+ for &#9830;.
====

이더(Ether)는 더 작은 단위로 세분화 될 수 있다. 그리고 그 단위 중 가장 작은 것은 _wei_ 이다. 1 이더는 백경 (1,000,000,000,000,000,000 | 10^18) _wei_ 이다. 사람들이 종종 화폐 이름으로 "이더리움" 말하는 것을 들어 본 적이 있을 것이다. 하지만, 엄연히 얘기하면 그것은 옳은 표현법이 아니다. 이더리움 시스템 그 자체이고, 이더(_ether_) 가 화폐이다.

The value of ether is always represented internally in Ethereum as an unsigned integer value denominated in wei. When you transact 1 ether, the transaction encodes 1000000000000000000 wei as the value.

Ether’s various denominations have both a scientific name using the International System of Units (SI) and a colloquial name that pays homage to many of the great minds of computing and cryptography.

Ether denominations and unit names shows the various units, their colloquial (common) names, and their SI names. In keeping with the internal representation of value, the table shows all denominations in wei (first row), with ether shown as 1018 wei in the 7th row.

[[ether_denominations]]
.Ether denominations and unit names
[options="header"]
|===
| Value (in wei) | Exponent | Common name | SI name
| 1 | 1 | wei | Wei
| 1,000 | 10^3^ | Babbage | Kilowei or femtoether
| 1,000,000 | 10^6^ | Lovelace | Megawei or picoether
| 1,000,000,000 | 10^9^ | Shannon | Gigawei or nanoether
| 1,000,000,000,000 | 10^12^ | Szabo | Microether or micro
| 1,000,000,000,000,000 | 10^15^ | Finney | Milliether or milli
| _1,000,000,000,000,000,000_ | _10^18^_ | _Ether_ | _Ether_
| 1,000,000,000,000,000,000,000 | 10^21^ | Grand | Kiloether
| 1,000,000,000,000,000,000,000,000 | 10^24^ | | Megaether
|===

[[choosing_eth_wallet]]
=== 이더리움 지갑 고르기

((("Ethereum (generally)","wallet choices")))((("wallets","choosing")))((("wallets","defined"))) 용어 "지갑"은 많은 의미를 가지고 있다. although they are all related and on a day-to-day basis boil down pto pretty much the same thing. 우리는 당신의 이더리움 계정을 관리하는 것을 보조하는 소프트웨어 어플리케이션의 의미로 "지갑"이라는 용어를 사용하려고 한다. 즉, 이더리움 지갑은 이더리움 시스템으로의 gateway 이다. 나의 키를 보유하고 있고 나의 의지에 따라 거래를 생성하고 broadcast 시킨다. 이더리움 지갑의 종류가 많고 각각 다른 특징과 디자인을 가지고 있기 때문에, 선택하는 것이 쉽지는 않다. 몇 개는 입문자에게 알맞고 몇 개는 전문가에게 알맞는다. 이더리움 플랫폼은 그 스스로 여전히 개선되고 있기에 최고의 지갑은 플랫폼 업그레이드에 따라서 같이 변화를 적용시키는 것이라고 할 수 있다. (are often the ones that adapt to the changes)

당신이 특정 지갑을 골랐는데 그 지갑이 작동하는 방식이 마음에 들지 않는다면 &#x2014; 혹은 괜찮았지만 또 다른 것들을 경험해보고 싶었다면 &#x2014 상당히 쉽게 바꿀 수 있기 때문에 그 점에 대해서는 걱정할 필요가 없다.&#x2014 지갑 바꿀때 해야할 것은 2가지이다. 내 돈(fund)을 새 지갑으로 옮기고 private eys를 export 해서 새 지갑에 import 하면 된다. 

이 책에서 우리는 3가지 다른 지갑을 사용해 볼 것이다. 모바일 지갑, 데스크탑 지갑 그리고 웹 기반의 지갑. 이 3가지 지갑은 수많은 다양성(complexity) 와 특징을 대변하기에 이렇게 선택하였다. 그러나, 이것이 지갑의 품질과 보안을 보증하는 것은 아니다. 단지 구현과 테스팅을 하는데 있어서 좋은 시작인 것이다. 

((("private keys","wallets and"))) 지갑 어플리케이션이 작동하기 위해서 기억해야할 것이 있다. 지갑 어플리케이션은 private keys 에 접근할 수 있는 권한이 있기 때문에, wallet application 을 믿을 수 있는 곳에서 다운로드 받고 사용해야한다는 점이다. 다행히도, 보통, 유명한 지갑 어플리케이션일수록 믿을만한 곳이다. Nevertheless, it is good practice to avoid "putting all your eggs in one basket" and have your Ethereum accounts spread across a couple of wallets.

다음 목록은 입문자에게 적절한 지갑들이다 : 

MetaMask:: ((("MetaMask")))MetaMask is a browser extension wallet that runs in your browser (Chrome, Firefox, Opera, or Brave Browser). It is easy to use and convenient for testing, as it is able to connect to a variety of Ethereum nodes and test blockchains. MetaMask is a web-based wallet.

Jaxx:: ((("Jaxx")))((("wallets","Jaxx")))Jaxx is a multiplatform and multicurrency wallet that runs on a variety of operating systems, including Android, iOS, Windows, macOS, and Linux. It is often a good choice for new users as it is designed for simplicity and ease of use. Jaxx is either a mobile or a desktop wallet, depending on where you install it.

MyEtherWallet (MEW):: ((("Ethereum Classic (ETC)","Emerald Wallet and")))((("MyEtherWallet (MEW)")))((("wallets","Emerald Wallet")))((("wallets","MyEtherWallet")))MyEtherWallet is a web-based wallet that runs in any browser. It has multiple sophisticated features we will explore in many of our examples. MyEtherWallet is a web-based wallet.

Emerald Wallet:: ((("Emerald Wallet")))Emerald Wallet is designed to work with the Ethereum Classic blockchain, but is compatible with other Ethereum-based blockchains. It's an open source desktop application and works under Windows, macOS, and Linux. Emerald Wallet can run a full node or connect to a public remote node, working in a "light" mode. It also has a companion tool to do all operations from the command line.

We'll start by installing MetaMask on a desktop&#x2014;but first, we'll briefly discuss controlling and managing keys.

[[control_responsibility]]
=== Control and Responsibility

((("Ethereum (generally)","control and responsibility", id="ix_02intro-asciidoc1", range="startofrange"))) 이더리움과 같은 오픈 블록체인은 탈 중앙화된 시스템으로서 작동하기에 매우 중요하다. 이는 많은 것을 의미하는데, 가장 결정적인 부분은 이더리움의 각 사용자는 fund 나 스마트 컨트랙트로 접근할 수 있게 하는 그들의 개인키를 관리할 수 있다는 것이다(해야만 한다). 우리는 가끔 fund 와 스마트 컨트랙트에 접근할 수 있는 이 조합을 "account" 혹은 "지갑"이라고 부른다. 이 용어들은 그 기능이 상당히 복잡할 수 있으니, 자세한 부분은 나중에 설명하려고 한다. 원칙적으로, 하나의 개인키는 하나의 "account" 이다. 몇몇 유저들은 그냥 제 3의 custodian 을 사용함으로서(써?) 그들의 개인키에 대한 통제권을 포기하기도 한다, 온라인 거래가 대표적인 예이다(거래소? such as an online exchange). g아이 책에서는 어떻게 당신의 개인키를 통제하고 관리하는지에 대해서 가르쳐 줄 것이다. 

통제권을 갖는다는 것은 동시에 큰 책임을 의미한다. 만약에 당신이 당신의 개인키를 잃어버리면 당신의 fund 와 컨트랙트에 대한 접근 권한을 잃어버리는 것이다. 아무도 당신이 당신의 계좌에 재접근할 수 있게 도와줄 수 없다. - 당신의 fund 는 평생 잠기게 되는 것이다. 여기 개인키를 관리하는데 있어서 도움이 될 만한 몇가지 팁이 있다. 

* 보안을 가볍게(즉흥으로) 처리하지 말아라. 검증된 표준 방식을 사용하세요. 

* 중요한 계정일수록 더 높은 수준의 보안방법을 사용하세요. (더 많은 양의 돈을 담고 있거나, 더 중요한 스마트 컨트랙트에 접근 권한이 있거나)

* 가장 높은 수준의 보안은 air-gapped 장치로부터 얻어진다, 그러나 모든 계정에게 이 정도 수준의 보안이 필요한 것은 아니다. 

* 절대로 개인키를 대충(plain form) 저장하지 마세요 , 특히 디지털 형식으로. 다행스럽게도, 오늘날의 대다수의 UI는 당신의 개인키 그대로를 노출 시키지는 않는다. 

* ((("private keys","wallets and")))개인키는 디지털 "keystore" 파일로서 암호화된 형태로 저장될 수 있다. 암호화 되어있으면, 언락하기 위해서 비밀번호가 필요하다. 비밀번호를 정할 때 비밀번호의 수준을 높이고(길게 하거나 무작위로) 백업해놓고 그리고 절대 공유하면 안된다. 만약 비밀번호 관리자(관리 프로그램)가 따로 없다면, 써놓고 안전한 장소에 따로 보관해라. 당신의 계좌에 접근하기 위해서, 당신은 keystore 파일 그리고 비밀번호 모두가 필요하게 된다.

* 절대 그 어떤 비밀번호도 디지털 문서, 사진, 스크린 샷, 온라인 드라이브 , 암호화된 PDF들 등의 형태로 저장하지 말아라. 다시 한번 말하지만 보안을 가벼운 방법으로 처리하지 말아라. 패스워드 관리자(프로그램)을 사용하거나 펜과 종이를 사용해라. 

* 연상 단어 열로 키를 백업하고 싶으면 펜과 종이를 써서 물리적으로 보관하라. 절대로 나중에 해야지 라고 생각하면 안된다 ; 높은 확률로 잊을 것이다. 이런 백업들이 나중에 만의 하나의 사태로 당신의 시스템에 있는 모든 데이터가 날아가거나 당신의 비밀번호를 잊어버렸을 때, 당신의 개인키를 재설정할 수 있게 한다. 그러나 해커들(attacker)들에게 당신의 개인키가 사용될 수도 있으니, 절대로 디지털 형태로 저장하지 말고 안전한 곳에(a locked drawer or safe) 물리적으로(physical copy) 보관하는 것을 추천한다. 

* 큰 규모의 금액을 전송할 때는(특히 새로운 주소일 때), 일단 먼저 간단한 test 트랜잭션을 실행해보고 그 결과를 기다려보자.(wait for confirmation of receipt)

* 새로운 계좌를 생성할 때, 새로운 계좌에 작은 시험 트랜잭션으로 시작하라.(?) 만약 당신이 시험 트랜잭션을 수신했으면, 그 계좌로 다시 보내봐라. 계좌 개설할 때, 잘못될 수 있는 이유는 많다. 그리고 만약 무언가 잘 못 되었다면 그 피해는 최소한으로 하는 것이 좋을 것이다. 만약 테스트 결과가 옳다면 모든 것이 괜찮은 것인 것이다.  

* 퍼블릭 블록 탐색자가(block explorer) 네트워크에 의해 트랜잭션이 승인되었는지를 독립적으로 확인할 수 있는 가장 쉬운 방법이다. 그러나, 이러한 편리함은 당신의 프라이버시에 부정적인 영향을 끼친다. 왜냐하면, 당신이 당신의 주소를 block explorer 에게 공개했기에, 그들은 당신을 tracking 할 수 있게되기 때문이다. 

* 이 책에 나와있는 그 어느 주소로도 돈을 송금하지 않는다. 이 책에는 개인키도 나열되어 있기 때문에 누군가는 바로 그 돈을 취할 수 있다. 

이제 우리는 키 관리 및 보안에 대한 몇가지 기본적이면서 최고의 방법을 깨우쳤다, 이제부터는 메타마스크를 사용해보자. (((range="endofrange", startref="ix_02intro-asciidoc1")))

[[installing_MetaMask]]
=== Getting Started with MetaMask

((("Ethereum (generally)","MetaMask basics", id="ix_02intro-asciidoc2", range="startofrange")))((("MetaMask","basics", id="ix_02intro-asciidoc3", range="startofrange")))Open the Google Chrome browser and navigate to https://chrome.google.com/webstore/category/extensions[].

Search for "MetaMask" and click on the logo of a fox. You should see something like the result shown in <<metamask_download>>.

[[metamask_download]]
.The detail page of the MetaMask Chrome extension
image::images/metamask_download.png["MetaMask Detail Page"]

It's important to verify that you are downloading the real MetaMask extension, as sometimes people are able to sneak malicious extensions past Google's filters. The real one:

* Shows the ID +nkbihfbeogaeaoehlefnkodbefgpgknn+ in the address bar
* Is offered by https://metamask.io
* Has more than 1,400 reviews
* Has more than 1,000,000 users

Once you confirm you are looking at the correct extension, click "Add to Chrome" to install it.

[[using_MetaMask]]
==== Creating a Wallet

((("MetaMask","wallet setup with", id="ix_02intro-asciidoc4", range="startofrange")))Once MetaMask is installed you should see a new icon (the head of a fox) in your browser's toolbar. Click on it to get started. You will be asked to accept the terms and conditions and then to create your new Ethereum wallet by entering a password (see <<metamask_password>>).

[[metamask_password]]
.The password page of the MetaMask Chrome extension
image::images/metamask_password.png["MetaMask Password Page"]

[TIP]
====
The password controls access to MetaMask, so that it can't be used by anyone with access to your browser.
====

((("mnemonic code words","MetaMask and", id="ix_02intro-asciidoc5", range="startofrange")))Once you've set a password, MetaMask will generate a wallet for you and show you a _mnemonic backup_ consisting of 12 English words (see <<metamask_mnemonic>>). These words can be used in any compatible wallet to recover access to your funds should something happen to MetaMask or your computer. You do not need the password for this recovery; the 12 words are sufficient.

[TIP]
====
Back up your mnemonic (12 words) on paper, twice. Store the two paper backups in two separate secure locations, such as a fire-resistant safe, a locked drawer, or a safe deposit box. Treat the paper backups like cash of equivalent value to what you store in your Ethereum wallet. Anyone with access to these words can gain access and steal your money.
====

[[metamask_mnemonic]]
.The mnemonic backup of your wallet, created by MetaMask
image::images/metamask_mnemonic.png["MetaMask Mnemonic Page"]

Once you have confirmed that you have stored the mnemonic securely, you'll be able to see the details of your Ethereum account, as shown in <<metamask_account>>.(((range="endofrange", startref="ix_02intro-asciidoc5")))

[[metamask_account]]
.Your Ethereum account in MetaMask
image::images/metamask_account.png["MetaMask Account Page"]

Your account page shows the name of your account ("Account 1" by default), an Ethereum address (+0x9E713...+ in the example), and a colorful icon to help you visually distinguish this account from other accounts. At the top of the account page, you can see which Ethereum network you are currently working on ("Main Network" in the example).

Congratulations! You have set up your first Ethereum wallet.(((range="endofrange", startref="ix_02intro-asciidoc4")))

[[switching_networks]]
==== Switching Networks

((("MetaMask","network choices")))As you can see on the MetaMask account page, you can choose between multiple Ethereum networks. By default, MetaMask will try to connect to the main network. The other choices are public testnets, any Ethereum node of your choice, or nodes running private blockchains on your own computer (localhost):

Main Ethereum Network:: The main public Ethereum blockchain. Real ETH, real value, and real consequences.

Ropsten Test Network:: Ethereum public test blockchain and network. ETH on this network has no value.

Kovan Test Network:: Ethereum public test blockchain and network using the Aura consensus protocol with proof of authority (federated signing). ETH on this network has no value. The Kovan test network is supported by Parity only. Other Ethereum clients use the Clique consensus protocol, which was proposed later, for proof of authority&#x2013;based verification.

Rinkeby Test Network:: Ethereum public test blockchain and network, using the Clique consensus protocol with proof of authority (federated signing). ETH on this network has no value.

Localhost 8545:: Connects to a node running on the same computer as the browser. The node can be part of any public blockchain (main or testnet), or a private testnet.

Custom RPC:: Allows you to connect MetaMask to any node with a Geth-compatible Remote Procedure Call (RPC) interface. The node can be part of any public or private blockchain.

[NOTE]
====
Your MetaMask wallet uses the same private key and Ethereum address on all the networks it connects to. However, your Ethereum address balance on each Ethereum network will be different. Your keys may control ether and contracts on Ropsten, for example, but not on the main network.
====

[[getting_test_eth]]
==== Getting Some Test Ether

((("ether (generally)","testnet")))((("MetaMask","and testnet ether")))((("test ether","obtaining")))((("testnet","ether for")))((("wallets","testnet ether and")))Your first task is to get your wallet funded. You won't be doing that on the main network because real ether costs money and handling it requires a bit more experience. For now, you'll load your wallet with some testnet ether.

((("Ropsten Test Network")))Switch MetaMask to the _Ropsten Test Network_. Click Buy, then click Ropsten Test Faucet. MetaMask will open a new web page, as shown in <<metamask_ropsten_faucet>>.

[[metamask_ropsten_faucet]]
.MetaMask Ropsten Test Faucet
image::images/metamask_ropsten_faucet.png["MetaMask Ropsten Test Faucet"]

You may notice that the web page already contains your MetaMask wallet's Ethereum address. MetaMask integrates Ethereum-enabled web pages with your MetaMask wallet and can "see" Ethereum addresses on the web page, allowing you, for example, to send a payment to an online shop displaying an Ethereum address. MetaMask can also populate the web page with your own wallet's address as a recipient address if the web page requests it. In this page, the faucet application is asking MetaMask for a wallet address to send test ether to.

Click the green "request 1 ether from faucet" button. You will see a transaction ID appear in the lower part of the page. The faucet app has created a transaction&#x2014;a payment to you. The transaction ID looks like this:

[[faucet_tx_id]]
----
0x7c7ad5aaea6474adccf6f5c5d6abed11b70a350fbc6f9590109e099568090c57
----

In a few seconds, the new transaction will be mined by the Ropsten miners and your MetaMask wallet will show a balance of 1 ETH. Click on the transaction ID and your browser will take you to a _block explorer_, which is a website that allows you to visualize and explore blocks, addresses, and transactions. MetaMask uses the https://etherscan.io/[Etherscan block explorer], one of the more popular Ethereum block explorers. The transaction containing the payment from the Ropsten Test Faucet is shown in <<ropsten_block_explorer>>.

[[ropsten_block_explorer]]
.Etherscan Ropsten block explorer
image::images/ropsten_block_explorer.png["Etherscan Ropsten Block Explorer"]

The transaction has been recorded on the Ropsten blockchain and can be viewed at any time by anyone, simply by searching for the transaction ID, or http://bit.ly/2Q860Wk[visiting the link].

Try visiting that link, or entering the transaction hash into the _ropsten.etherscan.io_ website, to see it for yourself.

[[sending_eth_MetaMask]]
==== Sending Ether from MetaMask

((("MetaMask","sending ether from", id="ix_02intro-asciidoc6", range="startofrange")))((("test ether","sending", id="ix_02intro-asciidoc7", range="startofrange")))Once you've received your first test ether from the Ropsten Test Faucet, you can experiment with sending ether by trying to send some back to the faucet. As you can see on the Ropsten Test Faucet page, there is an option to "donate" 1 ETH to the faucet. This option is available so that once you're done testing, you can return the remainder of your test ether, so that someone else can use it next. Even though test ether has no value, some people hoard it, making it difficult for everyone else to use the test networks. Hoarding test ether is frowned upon!

Fortunately, we are not test ether hoarders. Click the orange "1 ether" button to tell MetaMask to create a transaction paying the faucet 1 ether. MetaMask will prepare a transaction and pop up a window with the confirmation, as shown in <<send_to_faucet>>.


[[send_to_faucet]]
.Sending 1 ether to the faucet
image::images/send_to_faucet.png["Sending 1 ether to the faucet"]

Oops! You probably noticed you can't complete the transaction&#x2014;MetaMask says you have an insufficient balance. At first glance this may seem confusing: you have 1 ETH, you want to send 1 ETH, so why is MetaMask saying you have insufficient funds?

((("gas","basics")))The answer is because of the cost of _gas_. Every Ethereum transaction requires payment of a fee, which is collected by the miners to validate the transaction. The fees in Ethereum are charged in a virtual currency called gas. You pay for the gas with ether, as part of the transaction.

[NOTE]
====
((("gas","on test networks")))Fees are required on the test networks too. Without fees, a test network would behave differently from the main network, making it an inadequate testing platform. Fees also protect the test networks from DoS attacks and poorly constructed contracts (e.g., infinite loops), much like they protect the main network.
====

When you sent the transaction, MetaMask calculated the average gas price of recent successful transactions at 3 gwei, which stands for gigawei. Wei is the smallest pass:[<span class="keep-together">subdivision</span>] of the ether currency, as we discussed in <<ether_units>>. The gas limit is set at the cost of sending a basic transaction, which is 21,000 gas units. Therefore, the maximum amount of ETH you will spend is 3 * 21,000 gwei = 63,000 gwei = 0.000063 ETH. (Be advised that average gas prices can fluctuate, as they are predominantly determined by miners. We will see in a later chapter how you can increase/decrease your gas limit to ensure your transaction takes precedence if need be.)

All this to say: making a 1 ETH transaction costs 1.000063 ETH. MetaMask confusingly rounds that _down_ to 1 ETH when showing the total, but the actual amount you need is 1.000063 ETH and you only have 1 ETH. Click Reject to cancel this transaction.

Let's get some more test ether! Click the green "request 1 ether from the faucet" button again and wait a few seconds. Don't worry, the faucet should have plenty of ether and will give you more if you ask.

Once you have a balance of 2 ETH, you can try again. This time, when you click the orange "1 ether" donation button, you have sufficient balance to complete the transaction. Click Submit when MetaMask pops up the payment window. After all of this, you should see a balance of 0.999937 ETH because you sent 1 ETH to the faucet with 0.000063 ETH in gas.(((range="endofrange", startref="ix_02intro-asciidoc7")))(((range="endofrange", startref="ix_02intro-asciidoc6")))

[[explore_tx_history]]
==== Exploring the Transaction History of an Address

((("addresses","exploring transaction history of", id="ix_02intro-asciidoc8", range="startofrange")))((("MetaMask","exploring transaction history of an address with", id="ix_02intro-asciidoc9", range="startofrange")))By now you have become an expert in using MetaMask to send and receive test ether. Your wallet has received at least two payments and sent at least one. You can view all these transactions using the _ropsten.etherscan.io_ block explorer. You can either copy your wallet address and paste it into the block explorer's search box, or have MetaMask open the page for you. Next to your account icon in MetaMask, you will see a button showing three dots. Click on it to show a menu of account-related options (see <<metamask_account_context_menu>>).

[[metamask_account_context_menu]]
.MetaMask account context menu
image::images/metamask_account_context_menu.png["MetaMask Account Context Menu"]

Select "View account on Etherscan" to open a web page in the block explorer showing your account's transaction history, as shown in <<block_explorer_account_history>>.

[[block_explorer_account_history]]
.Address transaction history on Etherscan
image::images/block_explorer_account_history.png["Address Transaction History on Etherscan"]

Here you can see the entire transaction history of your Ethereum address. It shows all the transactions recorded on the Ropsten blockchain where your address is the sender or recipient. Click on a few of these transactions to see more details.

You can explore the transaction history of any address. Take a look at the transaction history of the Ropsten Test Faucet address (hint: it is the "sender" address listed in the oldest payment to your address). You can see all the test ether sent from the faucet to you and to other addresses. Every transaction you see can lead you to more addresses and more transactions. Before long you will be lost in the maze of interconnected data. Public blockchains contain an enormous wealth of information, all of which can be explored programmatically, as we will see in future examples(((range="endofrange", startref="ix_02intro-asciidoc9")))(((range="endofrange", startref="ix_02intro-asciidoc8"))).(((range="endofrange", startref="ix_02intro-asciidoc3")))(((range="endofrange", startref="ix_02intro-asciidoc2")))

[[intro_world_computer]]
=== Introducing the World Computer

((("Ethereum (generally)","and EVM")))((("EVM (Ethereum Virtual Machine)","as world computer")))((("world computer, Ethereum as")))You've now created a wallet and sent and received ether. So far, we've treated Ethereum as a cryptocurrency. But Ethereum is much, much more. In fact, the cryptocurrency function is subservient to Ethereum's function as a decentralized world computer. ((("smart contracts","ether and")))Ether is meant to be used to pay for running _smart contracts_, which are computer programs that run on an emulated computer called the _Ethereum Virtual Machine_ (EVM).

The EVM is a global singleton, meaning that it operates as if it were a global, single-instance computer, running everywhere. Each node on the Ethereum network runs a local copy of the EVM to validate contract execution, while the Ethereum blockchain records the changing _state_ of this world computer as it processes transactions and smart contracts. We'll discuss this in much greater detail in <<evm_chapter>>.

[[EOA_contracts]]
=== Externally Owned Accounts (EOAs) and Contracts

((("contract accounts", seealso="smart contracts")))((("EOA (Externally Owned Account)","basics")))((("Ethereum (generally)","EOAs and contracts")))((("smart contracts","basics")))The type of account you created in the MetaMask wallet is called an _externally owned account_ (EOA). Externally owned accounts are those that have a private key; having the private key means control over access to funds or contracts. Now, you're probably guessing there is another type of account. That other type of account is a _contract account_. A contract account has smart contract code, which a simple EOA can't have. Furthermore, a contract account does not have a private key. Instead, it is owned (and controlled) by the logic of its smart contract code: the software program recorded on the Ethereum blockchain at the contract account's creation and executed by the EVM.

Contracts have addresses, just like EOAs. Contracts can also send and receive ether, just like EOAs. However, when a transaction destination is a contract address, it causes that contract to _run_ in the EVM, using the transaction, and the transaction's data, as its input. In addition to ether, transactions can contain _data_ indicating which specific function in the contract to run and what parameters to pass to that function. In this way, transactions can _call_ functions within contracts.

Note that because a contract account does not have a private key, it cannot _initiate_ a transaction. Only EOAs can initiate transactions, but contracts can _react_ to transactions by calling other contracts, building complex execution paths. One typical use of this is an EOA sending a request transaction to a multisignature smart contract wallet to send some ETH on to another address. A typical DApp programming pattern is to have Contract A calling Contract B in order to maintain a shared state across users of Contract A.

In the next few sections, we will write our first contract. You will then learn how to create, fund, and use that contract with your MetaMask wallet and test ether on the Ropsten test network.

[[simple_contract_example]]
=== A Simple Contract: A Test Ether Faucet

((("contract accounts","creating", seealso="Faucet.sol contract", id="ix_02intro-asciidoc10", range="startofrange")))((("Faucet.sol contract (test example)","creating", id="ix_02intro-asciidoc11", range="startofrange")))Ethereum has many different high-level languages, all of which can be used to write a contract and produce EVM bytecode. You can read about many of the most prominent and interesting ones in <<high_level_languages>>. One high-level language is by far the dominant choice for smart contract programming: Solidity. ((("Wood, Dr. Gavin","and Solidity")))Solidity was created by Dr. Gavin Wood, the coauthor of this book, and has become the most widely used language in Ethereum (and beyond). We'll use Solidity to write our first contract.

((("Solidity","faucet.sol and")))For our first example (<<solidity_faucet_example>>), we will write a contract that controls a _faucet_. You've already used a faucet to get test ether on the Ropsten test network. A faucet is a relatively simple thing: it gives out ether to any address that asks, and can be refilled periodically. You can implement a faucet as a wallet controlled by a human or a web server.

[[solidity_faucet_example]]
.Faucet.sol: A Solidity contract implementing a faucet
====
[source,solidity,linenums]
----
include::code/Solidity/Faucet.sol[]
----
====

[NOTE]
====
You will find all the code samples for this book in the _code_ subdirectory of https://github.com/ethereumbook/ethereumbook/[the book's GitHub repository]. Specifically, our _Faucet.sol_ contract is in:

----
code/Solidity/Faucet.sol
----
====

This is a very simple contract, about as simple as we can make it. It is also a _flawed_ contract, demonstrating a number of bad practices and security vulnerabilities. We will learn by examining all of its flaws in later sections. But for now, let's look at what this contract does and how it works, line by line. You will quickly notice that many elements of Solidity are similar to existing programming languages, such as JavaScript, Java, or Cpass:[++].

The first line is a comment:

[[comment]]
[source,solidity]
----
// Our first contract is a faucet!
----

Comments are for humans to read and are not included in the executable EVM bytecode. We usually put them on the line before the code we are trying to explain, or sometimes on the same line. Comments start with two forward slashes: +//+. Everything from the first slash until the end of that line is treated the same as a blank line and ignored.

The next line is where our actual contract starts:

[[contract_definition]]
[source,solidity]
----
contract Faucet {
----

This line declares a +contract+ object, similar to a +class+ declaration in other object-oriented languages. The contract definition includes all the lines between the curly braces (pass:[<code>{}</code>]), which define a _scope_, much like how curly braces are used in many other programming languages.

Next, we declare the first function of the +Faucet+ contract:

[[withdraw_function]]
[source,solidity]
----
function withdraw(uint withdraw_amount) public {
----

The function is named +withdraw+, and it takes one unsigned integer (+uint+) argument named +withdraw_amount+. It is declared as a public function, meaning it can be called by other contracts. The function definition follows, between curly braces. The first part of the +withdraw+ function sets a limit on withdrawals:

[[withdraw_limit]]
[source,solidity]
----
require(withdraw_amount <= 100000000000000000);
----

It uses the built-in Solidity function +require+ to test a precondition, that the +withdraw_amount+ is less than or equal to 100,000,000,000,000,000 wei, which is the base unit of ether (see <<ether_denominations>>) and equivalent to 0.1 ether. If the +withdraw+ function is called with a +withdraw_amount+ greater than that amount, the +require+ function here will cause contract execution to stop and fail with an _exception_. Note that statements need to be terminated with a semicolon in Solidity.

This part of the contract is the main logic of our faucet. It controls the flow of funds out of the contract by placing a limit on withdrawals. It's a very simple control but can give you a glimpse of the power of a programmable blockchain: decentralized software controlling money.

Next comes the actual withdrawal:

[[withdraw_command]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

A couple of interesting things are happening here. The +msg+ object is one of the inputs that all contracts can access. It represents the transaction that triggered the execution of this contract. The attribute +sender+ is the sender address of the transaction. The function +transfer+ is a built-in function that transfers ether from the current contract to the address of the sender. Reading it backward, this means +transfer+ to the +sender+ of the +msg+ that triggered this contract execution. The +transfer+ function takes an amount as its only argument. We pass the +withdraw_amount+ value that was the parameter to the +withdraw+ function declared a few lines earlier.

The very next line is the closing curly brace, indicating the end of the definition of our +withdraw+ function.

Next, we we declare one more function:

[[fallback_function]]
[source,solidity]
----
function () public payable {}
----

((("fallback function")))This function is a so-called _fallback_ or _default_ function, which is called if the transaction that triggered the contract didn't name any of the declared functions in the contract, or any function at all, or didn't contain data. Contracts can have one such default function (without a name) and it is usually the one that receives ether. That's why it is defined as a public and payable function, which means it can accept ether into the contract. It doesn't do anything, other than accept the ether, as indicated by the empty definition in the curly braces pass:[(<code>{}</code>)]. If we make a transaction that sends ether to the contract address, as if it were a wallet, this function will handle it.

Right below our default function is the final closing curly brace, which closes the definition of the contract +Faucet+. That's it!(((range="endofrange", startref="ix_02intro-asciidoc11")))(((range="endofrange", startref="ix_02intro-asciidoc10")))

[[compile_faucet_contract]]
=== Compiling the Faucet Contract

((("compiling","Faucet.sol contract", id="ix_02intro-asciidoc12", range="startofrange")))((("Faucet.sol contract (test example)","compiling", id="ix_02intro-asciidoc13", range="startofrange")))Now that we have our first example contract, we need to use a Solidity compiler to convert the Solidity code into EVM bytecode so it can be executed by the EVM on the blockchain itself.

The Solidity compiler comes as a standalone executable, as part of various frameworks, and bundled in Integrated Development Environments (IDEs). To keep things simple, we will use one of the more popular IDEs, called _Remix_.

((("Remix IDE")))Use your Chrome browser (with the MetaMask wallet you installed earlier) to navigate to the Remix IDE at https://remix.ethereum.org[].

When you first load Remix, it will start with a sample contract called _ballot.sol_. We don't need that, so close it by clicking the +x+ on the corner of the tab, as seen in <<remix_close_tab>>.

[[remix_close_tab]]
.Close the default example tab
image::images/remix_close_tab.png["Close the default example tab"]

Now, add a new tab by clicking on the circular plus sign in the top-left toolbar, as seen in <<remix_toolbar>>. Name the new file _Faucet.sol_.

[[remix_toolbar]]
.Click the plus sign to open a new tab
image::images/remix_toolbar.png["Click the plus sign to open a new tab"]

Once you have the new tab open, copy and paste the code from our example _Faucet.sol_, as seen in <<remix_faucet_load>>.

[[remix_faucet_load]]
.Copy the Faucet example code into the new tab
image::images/remix_faucet_load.png["Copy the Faucet example code into the new tab"]

Once you have loaded the _Faucet.sol_ contract into the Remix IDE, the IDE will automatically compile the code. If all goes well, you will see a green box with "Faucet" in it appear on the right, under the Compile tab, confirming the successful compilation (see <<remix_compile>>).

[[remix_compile]]
.Remix successfully compiles the Faucet.sol contract
image::images/remix_compile.png[""]

If something goes wrong, the most likely problem is that the Remix IDE is using a version of the Solidity compiler that is different from 0.4.19. In that case, our pragma directive will prevent _Faucet.sol_ from compiling. To change the compiler version, go to the Settings tab, set the version to 0.4.19, and try again.

The Solidity compiler has now compiled our _Faucet.sol_ into EVM bytecode. If you are curious, the bytecode looks like this:

[[faucet_bytecode]]
----
PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST PUSH1 0xE5 DUP1 PUSH2 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN
STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI
PUSH1 0x0 CALLDATALOAD PUSH29
0x100000000000000000000000000000000000000000000000000000000
SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x2E1A7D4D EQ PUSH1 0x41 JUMPI
JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT
JUMPDEST PUSH1 0x5F PUSH1 0x4 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1
SWAP2 SWAP1 POP POP PUSH1 0x61 JUMP JUMPDEST STOP JUMPDEST PUSH8
0x16345785D8A0000 DUP2 GT ISZERO ISZERO ISZERO PUSH1 0x77 JUMPI PUSH1 0x0 DUP1
REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND
PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1
0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO
ISZERO PUSH1 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6
0x627A7A723058 KECCAK256 PUSH9 0x13D1EA839A4438EF75 GASLIMIT CALLVALUE LOG4 0x5f
PUSH24 0x7541F409787592C988A079407FB28B4AD000290000000000
----

Aren't you glad you are using a high-level language like Solidity instead of programming directly in EVM bytecode? Me too!(((range="endofrange", startref="ix_02intro-asciidoc13")))(((range="endofrange", startref="ix_02intro-asciidoc12")))

[[create_contract]]
=== Creating the Contract on the Blockchain

((("blockchain","creating contract on", id="ix_02intro-asciidoc14", range="startofrange")))((("Faucet.sol contract (test example)","on the blockchain", id="ix_02intro-asciidoc15", range="startofrange")))So, we have a contract. We've compiled it into bytecode. Now, we need to "register" the contract on the Ethereum blockchain. We will be using the Ropsten testnet to test our contract, so that's the blockchain we want to submit it to.

((("zero address","contract registration")))Registering a contract on the blockchain involves creating a special transaction whose destination is the address +0x0000000000000000000000000000000000000000+, also known as the _zero address_. The zero address is a special address that tells the Ethereum blockchain that you want to register a contract. Fortunately, the Remix IDE will handle all of that for you and send the transaction to MetaMask.

((("Remix IDE", id="ix_02intro-asciidoc16", range="startofrange")))First, switch to the Run tab and select Injected Web3 in the Environment drop-down selection box. This connects the Remix IDE to the MetaMask wallet, and through MetaMask to the Ropsten test network. Once you do that, you can see Ropsten under Environment. Also, in the Account selection box it shows the address of your wallet (see <<remix_run>>).

[[remix_run]]
.Remix IDE Run tab, with Injected Web3 environment selected
image::images/remix_run.png["Remix IDE Run tab, with Injected Web3 environment selected"]

Right below the Run settings you just confirmed is the +Faucet+ contract, ready to be created. Click on the Deploy button shown in <<remix_run>>.

Remix will construct the special "creation" transaction and MetaMask will ask you to approve it, as shown in <<remix_metamask_create>>. You'll notice the contract creation transaction has no ether in it, but it has 258 bytes of data (the compiled contract) and will consume 10 gwei in gas. Click Submit to approve it.

[[remix_metamask_create]]
.MetaMask showing the contract creation transaction
image::images/remix_metamask_create.png["MetaMask showing the contract creation transaction"]

Now you have to wait. It will take about 15 to 30 seconds for the contract to be mined on Ropsten. Remix won't appear to be doing much, but be patient.

Once the contract is created, it appears at the bottom of the Run tab (see <<remix_contract_interact>>).

[[remix_contract_interact]]
.The Faucet contract is ALIVE!
image::images/remix_contract_interact.png["The Faucet contract is ALIVE!"]

Notice that the +Faucet+ contract now has an address of its own: Remix shows it as &#x201c;Faucet at 0x72e...c7829&#x201d; (although your address, the random letters and numbers, will be different). The small clipboard symbol to the right allows you to copy the contract address to your clipboard. We will use that in the next section.(((range="endofrange", startref="ix_02intro-asciidoc16")))(((range="endofrange", startref="ix_02intro-asciidoc15")))

[[interact_contract]]
=== Interacting with the Contract

((("Faucet.sol contract (test example)","interacting with", id="ix_02intro-asciidoc17", range="startofrange")))Let's recap what we've learned so far: Ethereum contracts are programs that control money, which run inside a virtual machine called the EVM. They are created by a special transaction that submits their bytecode to be recorded on the blockchain. Once they are created on the blockchain, they have an Ethereum address, just like wallets. Anytime someone sends a transaction to a contract address it causes the contract to run in the EVM, with the transaction as its input. Transactions sent to pass:[<span class="keep-together">contract</span>] addresses may have ether or data or both. If they contain ether, it is "deposited" to the contract balance. If they contain data, the data can specify a named function in the contract and call it, passing arguments to the function.

[[view_contract_address]]
==== Viewing the Contract Address in a Block Explorer

((("Faucet.sol contract (test example)","viewing contract address in a block explorer")))We now have a contract recorded on the blockchain, and we can see it has an Ethereum address. Let's check it out in the _ropsten.etherscan.io_ block explorer and see what a contract looks like. In the Remix IDE, copy the address of the contract by clicking the clipboard icon next to its name (see <<remix_contract_address>>).

[[remix_contract_address]]
.Copy the contract address from Remix
image::images/remix_contract_address.png["Copy the contract address from Remix"]

Keep Remix open; we'll come back to it again later. Now, navigate your browser to _ropsten.etherscan.io_ and paste the address into the search box. You should see the contract's Ethereum address history, as shown in <<etherscan_contract_address>>.(((range="endofrange", startref="ix_02intro-asciidoc17")))

[[etherscan_contract_address]]
.View the Faucet contract address in the Etherscan block explorer
image::images/etherscan_contract_address.png["View the Faucet contract address in the etherscan block explorer"]

[[fund_contract]]
==== Funding the Contract

((("Faucet.sol contract (test example)","sending ether to", id="ix_02intro-asciidoc18", range="startofrange")))For now, the contract only has one transaction in its history: the contract creation transaction. As you can see, the contract also has no ether (zero balance). That's because we didn't send any ether to the contract in the creation transaction, even though we could have.

Our faucet needs funds! Our first project will be to use MetaMask to send ether to the contract. You should still have the address of the contract in your clipboard (if not, copy it again from Remix). Open MetaMask, and send 1 ether to it, exactly as you would to any other Ethereum address (see <<metamask_send_to_contract>>).

[[metamask_send_to_contract]]
.Send 1 ether to the contract address
image::images/metamask_send_to_contract.png[""]

In a minute, if you reload the Etherscan block explorer, it will show another transaction to the contract address and an updated balance of 1 ether.

Remember the unnamed default public payable function in our _Faucet.sol_ code? It looked like this:

[[fallback_function_review]]
[source,solidity]
----
function () public payable {}
----

When you sent a transaction to the contract address, with no data specifying which function to call, it called this default function. Because we declared it as +payable+, it accepted and deposited the 1 ether into the contract's account balance. Your transaction caused the contract to run in the EVM, updating its balance. You have funded your faucet!(((range="endofrange", startref="ix_02intro-asciidoc18")))

[[withdraw_from_contract]]
==== Withdrawing from Our Contract

((("Faucet.sol contract (test example)","withdrawing funds from", id="ix_02intro-asciidoc19", range="startofrange")))((("withdrawal of funds from contract", id="ix_02intro-asciidoc20", range="startofrange")))Next, let's withdraw some funds from the faucet. To withdraw, we have to construct a transaction that calls the +withdraw+ function and passes a +withdraw_amount+ argument to it. To keep things simple for now, Remix will construct that transaction for us and MetaMask will present it for our approval.

Return to the Remix tab and look at the contract on the Run tab. You should see a red box labeled +withdraw+ with a field entry labeled +uint256 withdraw_amount+ (see <<remix_contract_withdraw>>).

[[remix_contract_withdraw]]
.The withdraw function of Faucet.sol, in Remix
image::images/remix_contract_interact.png["The withdraw function of Faucet.sol, in Remix"]

This is the Remix interface to the contract. It allows us to construct transactions that call the functions defined in the contract. We will enter a +withdraw_amount+ and click the withdraw button to generate the transaction.

First, let's figure out the +withdraw_amount+. We want to try and withdraw 0.1 ether, which is the maximum amount allowed by our contract. Remember that all currency values in Ethereum are denominated in wei internally, and our +withdraw+ function expects the +withdraw_amount+ to be denominated in wei too. The amount we want is 0.1 ether, which is 100,000,000,000,000,000 wei (a 1 followed by 17 zeros).



[TIP]
====
Due to a limitation in JavaScript, a number as large as 10^17 cannot be processed by Remix. Instead, we enclose it in double quotes, to allow Remix to receive it as a string and manipulate it as a +BigNumber+. If we don't enclose it in quotes, the Remix IDE will fail to process it and display "Error encoding arguments: Error: Assertion failed."
====

Type "100000000000000000" (with the quotes) into the +withdraw_amount+ box and click on the withdraw button (see <<remix_withdraw>>).

[[remix_withdraw]]
.Click "withdraw" in Remix to create a withdrawal transaction
image::images/remix_withdraw.png[""]

MetaMask will pop up a transaction window for you to approve. Click Submit to send your withdrawal call to the contract (see <<metamask_withdraw>>).

[[metamask_withdraw]]
.MetaMask transaction to call the withdraw function
image::images/metamask_withdraw.png["MetaMask transaction to call the withdraw function"]

Wait a minute and then reload the Etherscan block explorer to see the transaction reflected in the +Faucet+ contract address history (see <<etherscan_withdrawal_tx>>).

[[etherscan_withdrawal_tx]]
.Etherscan shows the transaction calling the withdraw function
image::images/etherscan_withdrawal_tx.png["Etherscan shows the transaction calling the withdraw function"]


We now see a new transaction with the contract address as the destination and a value of 0 ether. The contract balance has changed and is now 0.9 ether because it sent us 0.1 ether as requested. But we don't see an "OUT" transaction in the _contract address history_.

Where's the outgoing withdrawal? A new tab has appeared on the contract's address history page, named Internal Transactions. ((("internal transaction (message)")))Because the 0.1 ether transfer originated from the contract code, it is an internal transaction (also called a _message_). Click on that tab to see it (see <<etherscan_withdrawal_internal>>).


This "internal transaction" was sent by the contract in this line of code (from the pass:[<code><span class="keep-together">withdraw</span></code>] function in _Faucet.sol_):

[[withdraw_command_review]]
[source,solidity]
----
msg.sender.transfer(withdraw_amount);
----

To recap: you sent a transaction from your MetaMask wallet that contained data instructions to call the +withdraw+ function with a +withdraw_amount+ argument of 0.1 ether. That transaction caused the contract to run inside the EVM. As the EVM ran the +Faucet+ contract's +withdraw+ function, first it called the +require+ function and validated that the requested amount was less than or equal to the maximum allowed withdrawal of 0.1 ether. Then it called the +transfer+ function to send you the ether. Running the +transfer+ function generated an internal transaction that deposited 0.1 ether into your wallet address, from the contract's balance. That's the one shown on the Internal Transactions tab in Etherscan(((range="endofrange", startref="ix_02intro-asciidoc20")))(((range="endofrange", startref="ix_02intro-asciidoc19"))).(((range="endofrange", startref="ix_02intro-asciidoc14")))

[[etherscan_withdrawal_internal]]
.Etherscan shows the internal transaction transferring ether out from the contract
image::images/etherscan_withdrawal_internal.png["Etherscan shows the internal transaction transferring ether out from the contract"]

[[intro_conclusion]]
=== Conclusions

In this chapter, you set up a wallet using MetaMask and funded it using a faucet on the Ropsten test network. You received ether into your wallet's Ethereum address, then you sent ether to the faucet's Ethereum address.

Next, you wrote a faucet contract in Solidity. You used the Remix IDE to compile the contract into EVM bytecode, then used Remix to form a transaction and created the +Faucet+ contract on the Ropsten blockchain. Once created, the +Faucet+ contract had an Ethereum address, and you sent it some ether. Finally, you constructed a transaction to call the +withdraw+ function and successfully asked for 0.1 ether. The contract checked the request and sent you 0.1 ether with an internal transaction.

It may not seem like much, but you've just successfully interacted with software that controls money on a decentralized world computer.

We will do a lot more smart contract programming in <<smart_contracts_chapter>> and learn about best practices and security considerations in <<smart_contract_security>>.(((range="endofrange", startref="ix_02intro-asciidoc0")))



